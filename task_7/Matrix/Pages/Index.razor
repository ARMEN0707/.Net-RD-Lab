@page "/"
@using task_7;

<div>
    <p>Размер
    <input type="number" @bind="RowMatrix"/>
    X
    <input type="number" @bind-value="ColumnMatrix"/> 
    </p>   
    @for (int numberMatrix = 0; numberMatrix < 2; numberMatrix++)
    {
        <p>Maтрица @(numberMatrix+1)</p>     
        <table>
            @for (int i = 0; i < _rowMatrix; i++)
            {
                <tr>
                    @for (int j = 0; j < _columnMatrix; j++)
                    {
                        int indexRow = i;
                        int indexColumn = j;
                        <td>
                            @if (numberMatrix == 0)
                            {
                                <input style="width:70px;" type="number" @bind="_firstMatrix[indexRow,indexColumn]"/>
                            } else
                            {
                                <input style="width:70px;" type="number" @bind="_secondMatrix[indexRow,indexColumn]"/>
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    }

    <button @onclick="() => { _resultMatrix = _firstMatrix + _secondMatrix;}">Сумма</button>
    <button @onclick="() => { _resultMatrix = _firstMatrix - _secondMatrix;}">Вычитание</button>
    <button @onclick="() => { _resultMatrix = _firstMatrix * _secondMatrix;}">Произведение</button>

    @if(_resultMatrix != null)
    {       
        <p>Результат</p>     
        <table>
            @for (int i = 0; i < _rowMatrix; i++)
            {
                <tr>
                    @for (int j = 0; j < _columnMatrix; j++)
                    {
                        <td style="width:70px; height:50px;">
                            @_resultMatrix[i,j]
                        </td>
                    }
                </tr>
            }
        </table>
    }
</div> 


@code
{
    private Matrix _firstMatrix;
    private Matrix _secondMatrix;
    private Matrix _resultMatrix;
    private int _rowMatrix = 3;
    public int RowMatrix
    {
        get { return _rowMatrix; }
        set 
        {
            if (value <= 0)
                return;
            _rowMatrix = value;
            InitializedMatrix();
        }
    }
    private int _columnMatrix = 3;
    public int ColumnMatrix
    {
        get { return _columnMatrix; }
        set
        {
            if (value <= 0)
                return;
            _columnMatrix = value;
            InitializedMatrix();
        }
    }
    private void InitializedMatrix()
    {
        _firstMatrix = new Matrix(_rowMatrix, _columnMatrix, new double[_rowMatrix*_columnMatrix]);
        _secondMatrix = new Matrix(_rowMatrix, _columnMatrix, new double[_rowMatrix*_columnMatrix]);
    }
    protected override void OnInitialized()
    {
        InitializedMatrix();
    }

}

